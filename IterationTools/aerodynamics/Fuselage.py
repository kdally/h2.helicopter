import matplotlib.pyplot as plt
import numpy as np


# Mach Number at Cruise
def Mcruise_calc(Vcruise, Tcruise, gamma, R):
    Mcruise = Vcruise/np.sqrt(Tcruise*gamma*R)
    return Mcruise


# Oswald Efficiency Factor
def OswaldEfficiencyFActor(A):
    e = 1/(1.05+0.007*np.pi*A)
    return e


# Zero Lift Drag Coefficient
def ZeroLiftDragCoeff(Cfe, SwetoverSref):
    CD0 = Cfe*SwetoverSref*0.9-0.007*0.15-0.007
    return CD0


# Calculation of the Fuselage Lift Coefficient (DATCOM method)
def FuselageLiftCurveSlope(A, Mcruise, eta):
    beta = np.sqrt(1-Mcruise**2)
    CLalpha = (2*np.pi*A)/(2+np.sqrt(4+(A*beta)/(eta)))*(np.pi/180)
    return CLalpha


def CL_calc(CLalpha, alpha0, alpha1, alpha0L):
    alpha = np.arange(alpha0, alpha1)
    CL = CLalpha * (alpha - alpha0L)
    return CL


# Calculation of the Wing Drag Coefficient
def CD_calc(CD0, A, e, Vcruise, Tcruise, gamma, R, eta, alpha0, alpha1, alpha0L):
    CL = CL_calc(FuselageLiftCurveSlope(A, Mcruise_calc(Vcruise, Tcruise, gamma, R), eta), alpha0, alpha1, alpha0L)
    CD = CD0+CL**2/(np.pi*A*e)
    return CD


# CL at Design Conditions (cruise)
def CLtrimcalc(CLalpha, alphatrim, alpha0L):
    CLtrim = CLalpha * (alphatrim - alpha0L)
    return CLtrim


# Maximum Thickness (30% chord)
def MaxThickness(toverc, c):
    MaxT = toverc*c
    return MaxT


# Area Airfoil
def AreaAirfoil(k, tc, c):
    AA = ((k+3)/6)*tc*c**2
    return AA


# Fuselage Length
def l_fuselage():
    lfuselage = 5.45+1.4*3+2*0.04
    return lfuselage


def StallAnglefuselage_calc():
    StallAngle = 35+10
    return StallAngle


def main():
    pass


if __name__ == "__main__":

    # Variables
    Vcruise = 97.222
    Tcruise = 275.5
    gamma = 1.4
    R = 287.15
    eta = 0.95
    c = 9.73
    alphatrim = 2.1732
    alpha0 = -19
    alpha1 = 20
    alpha0L = -1.5
    b = 1.56
    A = b**2/(b*c-0.7*1.2-0.7*4.2)
    Cfe = 0.0045
    SwetoverSref = 5
    toverc = 0.21
    k = c*0.3

    # Airfoil Plot
    xcoord = [9650,    9647.6068,     9640.4465,     9628.5191,     9611.83425,    9590.43055,    9564.308,  9533.5245,     9498.109,  9458.1001,     9413.54605,    9364.50475,    9311.0341,     9253.20165,    9191.05565,    9124.6926,     9054.18005,    8979.58555,    8901.0056,     8818.52705,    8732.2271,     8642.20225,    8548.55865,    8451.38315,    8350.7819,     8246.86105,    8139.70745,    8029.4369,     7916.1652,     7799.9985,     7681.0333,     7559.4047,     7435.2092,     7308.5626,     7179.59035,    7048.40825,    6915.1321,     6779.88735,    6642.78015,    6503.9456,     6363.50915,    6221.57695,    6078.2841,     5933.75605,    5788.1279,     5641.5058,     5494.04415,    5345.8491,     5197.0654,     5047.82815,    4898.2628,     4748.4948,     4598.67855,    4448.94915,    4299.4031,     4149.56755,    3999.3074,     3848.7481,     3698.0344,     3547.33035,    3396.79035,    3246.61705,    3096.98415,    2948.12325,    2800.237,  2653.5763,     2508.3631,     2364.8676,     2223.35035,    2084.0719,     1947.30245,    1813.3315,     1682.4196,     1554.85625,    1430.89235,    1310.7981,     1194.8244,     1083.2125,     976.16505,     873.9233,  776.6513,  684.52275,     597.7017,  516.3136,  440.4646,  370.24155,     305.7313,  246.9628,  193.9843,  146.7958,  105.40695,     69.7888,   39.92205,  15.7488,   -2.7792,   -15.73915,     -23.1986,  -25.2637,  -22.01165,     -13.5486,  0,     18.3157,   41.0511,   68.0904,   99.2985,   134.54995,     173.70965,     216.65215,     263.252,   313.3741,  366.90265,     423.70255,     483.6773,  546.70145,     612.68815,     681.5409,  753.1825,  827.5261,  904.5331,  984.1456,  1066.33465,    1151.08095,    1238.37485,    1328.21635,    1420.62475,    1515.61935,    1613.2291,     1713.48295,    1816.4388,     1922.11595,    2030.5723,     2141.82715,    2255.92875,    2372.88675,    2492.7108,     2615.4202,     2740.986,  2869.39855,    3000.6096,     3134.56125,    3271.1956,     3410.4065,     3552.1071,     3696.17195,    3842.4563,     3990.8347,     4141.13345,    4292.90865,    4445.3883,     4598.38905,    4751.7372,     4905.288,  5058.8581,     5212.2931,     5365.4193,     5518.0823,     5670.1084,     5821.3239,     5971.5744,     6120.6862,     6268.5049,     6414.8761,     6559.61645,    6702.59085,    6843.63525,    6982.59525,    7119.3261,     7253.68305,    7385.52135,    7514.7059,     7641.09195,    7764.55405,    7884.9764,     8002.21425,    8116.1711,     8226.7215,     8333.7593,     8437.188,  8536.8918,     8632.7935,     8724.78695,    8812.8046,     8896.7596,     8976.57475,    9052.1825,     9123.5153,     9190.5249,     9253.1341,     9311.3043,     9364.9969,     9414.154,  9458.737,  9498.71695,    9534.07455,    9564.76155,    9590.7683,     9612.06585,    9628.6542,     9640.51405,    9647.6261,     9650]
    new_xcoord = [i / 1000 for i in xcoord]
    ycoord = [0,   0.56935,   2.2967,    5.16275,   9.1675,    14.31095,  20.5931,   28.01395,  36.54455,  46.19455,  56.94465,  68.8045,   81.74515,  95.75695,  110.83025,     126.9554,  144.1131,  162.28405,     181.4586,  201.6078,  222.722,   244.77225,     267.73925,     291.6037,  316.327,   341.8802,  368.244,   395.38945,     423.25865,     451.8323,  481.0718,  510.9289,  541.365,   572.3222,  603.7619,  635.61655,     667.84755,     700.3777,  733.1491,  766.10385,     799.16475,     832.2546,  865.30585,     898.2413,  930.9741,  963.4174,  995.494,   1027.1074,     1058.1804,     1088.5972,     1118.29025,    1147.1534,     1175.09015,    1202.01365,    1227.8274,     1252.4542,     1275.6914,     1297.29775,    1317.06095,    1334.75905,    1350.1701,     1363.1204,     1373.39765,    1380.84745,    1385.30575,    1386.6471,     1384.74605,    1379.5254,     1370.90795,    1358.86475,    1343.36685,    1324.4432,     1302.12275,    1276.4634,     1247.58095,    1215.5912,     1180.6196,     1142.8495,     1102.46425,    1059.6665,     1014.66855,    967.71165,     919.0274,  868.87635,     817.4901,  765.11955,     712.02525,     658.4195,  604.5532,  550.63865,     496.8785,  443.46575,     390.56445,     338.329,   286.90415,     236.39605,     186.9012,  138.4775,  91.1732,   45.0076,   0,     -43.2899,  -84.31205,     -123.0954,     -159.7075,     -194.20625,    -226.6592,     -257.1532,     -285.76545,    -312.5635,     -337.66315,    -361.1223,     -383.05675,    -403.53405,    -422.66035,    -440.5032,     -457.1591,     -472.70525,    -487.2092,     -500.7578,     -513.40895,    -525.2495,     -536.31805,    -546.68215,    -556.40935,    -565.53825,    -574.1364,     -582.2424,     -589.9045,     -597.17095,    -604.0707,     -610.64235,    -616.91485,    -622.9075,     -628.6396,     -634.13045,    -639.36075,    -644.34015,    -649.03005,    -653.41115,    -657.4352,     -661.03465,    -664.1709,     -666.7378,     -668.65815,    -669.83545,    -670.14425,    -669.4591,     -667.7028,     -664.9043,     -661.0829,     -656.2579,     -650.45825,    -643.6936,     -636.00255,    -627.4044,     -617.9281,     -607.5833,     -596.4279,     -584.4619,     -571.7239,     -558.2525,     -544.07665,    -529.2253,     -513.73705,    -497.66015,    -481.02355,    -463.88515,    -446.2739,     -428.23805,    -409.84515,    -391.14345,    -372.1812,     -353.0163,     -333.7163,     -314.3391,     -294.9619,     -275.63295,    -256.42945,    -237.4286,     -218.6883,     -200.2761,     -182.2885,     -164.7641,     -147.7994,     -131.4523,     -115.79035,    -100.8811,     -86.7921,  -73.58125,     -61.30645,     -50.0256,  -39.78695,     -30.6484,  -22.62925,     -15.77775,     -10.1325,  -5.7128,   -2.5476,   -0.6369,   0]
    new_ycoord = [i / 1000 for i in ycoord]
    chordlinex = [0, 9650/1000]
    chordliney = [0, 0]
    xcamber = [-23.1986,   -25.2637,  -22.01165,     -13.5486,  0,     18.3157,   41.0511,   68.0904,   99.2985,   134.54995,     173.70965,     216.65215,     263.252,   313.3741,  366.90265,     423.70255,     483.6773,  546.70145,     612.68815,     681.5409,  753.1825,  827.5261,  904.5331,  984.1456,  1066.33465,    1151.08095,    1238.37485,    1328.21635,    1420.62475,    1515.61935,    1613.2291,     1713.48295,    1816.4388,     1922.11595,    2030.5723,     2141.82715,    2255.92875,    2372.88675,    2492.7108,     2615.4202,     2740.986,  2869.39855,    3000.6096,     3134.56125,    3271.1956,     3410.4065,     3552.1071,     3696.17195,    3842.4563,     3990.8347,     4141.13345,    4292.90865,    4445.3883,     4598.38905,    4751.7372,     4905.288,  5058.8581,     5212.2931,     5365.4193,     5518.0823,     5670.1084,     5821.3239,     5971.5744,     6120.6862,     6268.5049,     6414.8761,     6559.61645,    6702.59085,    6843.63525,    6982.59525,    7119.3261,     7253.68305,    7385.52135,    7514.7059,     7641.09195,    7764.55405,    7884.9764,     8002.21425,    8116.1711,     8226.7215,     8333.7593,     8437.188,  8536.8918,     8632.7935,     8724.78695,    8812.8046,     8896.7596,     8976.57475,    9052.1825,     9123.5153,     9190.5249,     9253.1341,     9311.3043,     9364.9969,     9414.154,  9458.737,  9498.71695,    9534.07455,    9564.76155,    9590.7683,     9612.06585,    9628.6542,     9640.51405,    9647.6261,     9650]
    new_xcamber = [i / 1000 for i in xcamber]
    ycamber = [186.9012,   69.23875,  142.975018,    144.97038,     147.308939,    150.292929,    154.126111,    158.681035,    164.005404,    170.263107,    177.364743,    185.223856,    193.756131,    202.876027,    212.354181,    221.933546,    231.854565,    242.033591,    252.385294,    262.7682,  272.773831,    282.748971,    292.635184,    302.358616,    311.536564,    320.283534,    328.717044,    336.774392,    344.218299,    350.891656,    357.034345,    362.588322,    367.488806,    371.31913,     374.365897,    376.608205,    377.988453,    378.454826,    377.768494,    376.008566,    373.243453,    369.4403,  364.59535,     358.702794,    351.782826,    343.87077,     335.013593,    325.270934,    314.732324,    303.535922,    291.807127,    279.71786,     267.462751,    255.118953,    242.722814,    230.318822,    217.94544,     205.653272,    193.465039,    181.43035,     169.580179,    157.964672,    146.597625,    135.531841,    124.794996,    114.40984,     104.406387,    94.813915,     85.653747,     76.936183,     68.68609,  60.907548,     53.618341,     46.822504,     40.515679,     34.700228,     29.374497,     24.535485,     20.160838,     16.248092,     12.775402,     9.729642,  7.087478,  4.825619,  2.928027,  1.365879,  0.103691,  -0.872687,     -1.599852,     -2.105215,     -2.415568,     -2.553883,     -2.556171,     -2.447884,     -2.254244,     -1.992334,     -1.694419,     -1.383524,     -1.072612,     -0.773982,     -0.510295,     -0.291257,     -0.133598,     -0.036071,     0]
    new_ycamber = [i / 1000 for i in ycamber]

    plt.plot(new_xcoord, new_ycoord, c='r', label='Airfoil Surface')
    plt.plot(chordlinex, chordliney, label='Chord Line', c='m')
    plt.plot(new_xcamber, new_ycamber, label='Camber Line', c='g')

    plt.title('Airfoil NACA 25121')
    plt.xlabel('Length [m]')
    plt.ylabel('Height [m]')
    plt.grid()
    plt.axis('equal')
    plt.legend(loc='upper left')
    #plt.savefig('FuselageAirfoil.png')
    plt.show()

    print("Fuselage Lift Curve Slope: " + str(FuselageLiftCurveSlope(A, Mcruise_calc(Vcruise, Tcruise, gamma, R), eta)) + " deg")

    CLalphaline = CL_calc(FuselageLiftCurveSlope(A, Mcruise_calc(Vcruise, Tcruise, gamma, R), eta), alpha0, alpha1, alpha0L)
    plt.plot(np.arange(alpha0, alpha1), CLalphaline)
    plt.title('Lift Coefficient (CL) vs. Angle of Attack (Fuselage)')
    plt.xlabel('Angle of Attack [°]')
    plt.ylabel('Lift Coefficient (CL) [-]')
    #plt.savefig('LiftCoefficientAngleofAttackFuselage.png')
    plt.grid()
    plt.show()

    CDalphaline = CD_calc(ZeroLiftDragCoeff(Cfe, SwetoverSref), A, OswaldEfficiencyFActor(A), Vcruise, Tcruise, gamma, R, eta, alpha0, alpha1, alpha0L)
    plt.plot(np.arange(alpha0, alpha1), CDalphaline)
    plt.title('Drag Coefficient (CD) vs. Angle of Attack (Fuselage)')
    plt.xlabel('Angle of Attack [°]')
    plt.ylabel('Drag Coefficient (CD) [-]')
    #plt.savefig('DragCoefficientAngleofAttackFuselage.png')
    plt.grid()
    plt.show()

    print('Fuselage Lift Coefficient at Design Conditions: ' + str(CLtrimcalc(FuselageLiftCurveSlope(A, Mcruise_calc(Vcruise, Tcruise, gamma, R), eta), alphatrim, alpha0L)) + ' -')

    print('Maximum Fuselage Thickness: ' + str(MaxThickness(toverc, c)) + ' m')

    print('Fuselage Length: ' + str(l_fuselage()) + ' m')

    print("Area Airfoil: " + str(AreaAirfoil(k, toverc, c)) + " m^2")

    print('Stall Angle Fuselage: ' + str(StallAnglefuselage_calc()) + ' deg')
